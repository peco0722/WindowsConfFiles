;; -*- mode: lisp-interaction; syntax: elisp -*-
;;     Time-stamp: <Feb 05 2010>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 日本語環境の設定
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(set-language-environment "Japanese")
(set-keyboard-coding-system 'japanese-shift-jis)
;(set-keyboard-coding-system 'utf-8)

;; UTF-8⇔Legacy Encoding (EUC-JP や Shift_JIS など)をWindowsで変換
;;http://nijino.homelinux.net/emacs/emacs23-ja.html
;; encode-translation-table の設定
(coding-system-put 'euc-jp :encode-translation-table
                   (get 'japanese-ucs-cp932-to-jis-map 'translation-table))
(coding-system-put 'iso-2022-jp :encode-translation-table
                   (get 'japanese-ucs-cp932-to-jis-map 'translation-table))
(coding-system-put 'cp932 :encode-translation-table
                   (get 'japanese-ucs-jis-to-cp932-map 'translation-table))
;; charset と coding-system の優先度設定
(set-charset-priority 'ascii 'japanese-jisx0208 'latin-jisx0201
                      'katakana-jisx0201 'iso-8859-1 'cp1252 'unicode)
(set-coding-system-priority 'utf-8 'euc-jp 'iso-2022-jp 'cp932)


;; フォント設定
(set-default-font "Verdana-9")
(set-fontset-font (frame-parameter nil 'font)
                                    'japanese-jisx0208
                                    '("ＭＳ ゴシック" . "unicode-bmp"))

;(set-default-font "M+2VM+IPAG circle-12")

;; IME の設定
(w32-ime-initialize)
(define-key isearch-mode-map "\C-k" 'isearch-edit-string) ; i-search に入ったとき、C-k すれば日本語が通る
(global-set-key '[non-convert] 'kkc-cancel) ; i-searchしたときquail/KKCが（勝手に起動して）終了しないので終了する
(global-set-key "\C-\\" 'quail-inactivate) ; quail/KKCが起動したとき停止

;;ime の ON/OFF でカーソルの色を変える
(set-cursor-color "snow1")
;(add-hook 'w32-ime-on-hook
;;          (function (lambda () (set-cursor-color "CornflowerBlue"))))
;          (function (lambda () (set-cursor-color "green"))))
;(add-hook 'w32-ime-off-hook
;          (function (lambda () (set-cursor-color "snow1"))))
(add-hook 'input-method-activate-hook
          (function (lambda () (set-cursor-color "green"))))
(add-hook 'input-method-inactivate-hook
          (function (lambda () (set-cursor-color "snow1"))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 画面設定
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'color-theme)
;(require 'color-theme-autoloads)
(color-theme-initialize)
;(color-theme-robin-hood)
(color-theme-arjen)


;;; フレームの設定
(setq default-frame-alist
      (append (list
               ;; サイズ・位置
               '(width . 130)  ; 横幅(文字数)
               '(height . 60) ; 高さ(行数)
               '(top . 0)    ; フレーム左上角 y 座標
               '(left . 0)   ; フレーム左上角 x 座標
               '(alpha . (85 40))
               )
              default-frame-alist))

; elisp変数表示のとき途中で省略しない
(setq eval-expression-print-level nil)
(setq eval-expression-print-length nil)

;; erase memubar, scrollbar
(menu-bar-mode -1)   ;画面上に出るメニュー(文字)を消す
(scroll-bar-mode -1) ;画面横に出るスクロールバーを消す
(tool-bar-mode -1)   ;画面上に出るツールバー(アイコン画像)を消す
(setq cursor-in-non-selected-windows nil)
                     ;非active windowにはカーソルを表示しない
(transient-mark-mode t)  ;選択したとき色がつくようにする

;; color
(global-font-lock-mode t)            ;font-lock use-all
;; リージョンに色をつける
(setq transient-mark-mode t)

;;; タブ, 全角スペースを表示する
;;;
(defface my-face-b-1 '((t (:background "gray15"))) nil)
(defface my-face-b-2 '((t (:background "gray26"))) nil)
(defface my-face-u-1 '((t (:foreground "SteelBlue" :underline t))) nil)
(defvar my-face-b-1 'my-face-b-1)
(defvar my-face-b-2 'my-face-b-2)
(defvar my-face-u-1 'my-face-u-1)
(defadvice font-lock-mode (before my-font-lock-mode ())
  (font-lock-add-keywords
   major-mode
   '(("\t" 0 my-face-b-2 append)
     ("　" 0 my-face-b-1 append)
     ("[ \t]+$" 0 my-face-u-1 append)
     )))
(ad-enable-advice 'font-lock-mode 'before 'my-font-lock-mode)
(ad-activate 'font-lock-mode)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 動作設定
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; tmp file saving directory
(setq auto-save-list-file-prefix "~/local/.emacs.d/.saves-")

;; backup.file~ location
(setq make-backup-files t)
(setq backup-directory-alist
      (cons (cons "\\.*$" (expand-file-name "~/local/.emacs.d"))
            backup-directory-alist))

;; auto-insert LAST-MODIFIED-DATE
(if (not (memq 'time-stamp write-file-hooks))
    (setq write-file-hooks
          (cons 'time-stamp write-file-hooks)))
(setq time-stamp-line-limit 40)
(setq time-stamp-format "%3b %02d %:y")
(setq system-time-locale "C")

;; cc-mode
(defun my-c-mode-common-hook ()
  (c-set-style "java")
  )
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
(add-to-list 'auto-mode-alist '("\\.c\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.pl\\'" . perl-mode))
(add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.as\\'" . java-mode))
;;; php-mode
(autoload 'php-mode "php-mode" "Mode for editing PHP source files")
(add-to-list 'auto-mode-alist '("\\.\\(inc\\|php[s34]?\\|ctp\\)" . php-mode))


;; 特定の拡張子を新規作成したとき、特定の文字コードを適用する
(modify-coding-system-alist 'file "\\.as\\'" 'utf-8-with-signature-dos)
(modify-coding-system-alist 'file "\\.rb\\'" 'utf-8-unix)
(modify-coding-system-alist 'file "\\.cgi\\'" 'utf-8-unix)
(modify-coding-system-alist 'file "\\.php\\'" 'utf-8-unix)
(modify-coding-system-alist 'file "\\.ctp\\'" 'utf-8-unix)

;; diff
(setq diff-command "c:/home/local/msys/bin/diff.exe")
(setq diff-switches "-uw")

;; dabbrev(dynamic abbreviation)でファイル名も補完候補にする
(setq dabbrev-ignored-buffer-names '("*Messages*"))

;; beep
(setq visible-bell nil)

;; 前回編集していた場所を記憶し，ファイルを開いた時にそこへカーソルを移動
(load "saveplace")
(setq-default save-place t)

;; kill-ring はテキスト属性（色情報など）を保存しなくていい
;; http://www-tsujii.is.s.u-tokyo.ac.jp/~yoshinag/tips/elisp_tips.html#yankoff
(defadvice kill-new (around my-kill-ring-disable-text-property activate)
  (let ((new (ad-get-arg 0)))
    (set-text-properties 0 (length new) nil new)
    ad-do-it))

;; org-mode
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-startup-truncated nil) ;;行の折り返し

;; URLをブラウザで開く
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program (w32-short-file-name "C:/Program Files/SRWare Iron/iron.exe"))


(setq inhibit-startup-message t) ;;スプラッシュ(起動画面)抑止
(buffer-menu)

;;; Local Variables:
;;; coding: utf-8-unix
;;; End:

